<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_arraytolist">Arrays.asList(${word_selection})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertEquals">    ${impst:importStatic('org.junit.Assert.*')}&#13;
    	assertEquals("${MensagemQuandoCondicaoNaoAtendida}", ${targetExpected}, ${ValueToBeCompared});&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertFalse">${impst:importStatic('org.junit.Assert.*')}&#13;
assertFalse("Mensagem Erro se for True ! ", ${resultadoParaSerValidado});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertSame">${imp:import(org.junit.Test)}&#13;
${impst:importStatic('org.junit.Assert.*')}&#13;
	assertSame(${targetExpected}, ${ValueToBeCompared});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThat">${impst:importStatic('org.junit.Assert.*')}&#13;
assertThat(${valorSeraValidado}, is(equalTo(ValorEsperadoAlmejado)));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatEqualTo">assertThat("A infração deve estar quitada.", infracaoConsultada.getIndPaga(), equalTo(IndicadorInfracaoPagaEnum.PAGA.getCodigo()));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatEqualToAnyOf">assertThat("O histórico deve estar pago anteriormente por guia GAD-D ou guia do SIT.", codigoSaidaInfracao, anyOf(equalTo(SituacaoInfracaoEnum.PAGA_GUIA_DA), equalTo(SituacaoInfracaoEnum.PAGA_GUIA_SIT)));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatListHasSize">assertThat("Deve haver um pagamento para a guia.", pagamentosGuia, hasSize(1));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatMatchersEqualTo">assertThat("O pagamento deve ser da guia.", pagamentoGuia.getGuia().getId(), Matchers.equalTo(guia.getId()));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatNotEqualTo">assertThat("O histórico deve ser diferente de pagamento da infração por guia SIT.", codigoSaidaInfracao, not(equalTo(SituacaoInfracaoEnum.PAGA_GUIA_SIT)))</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertThatNullValueClass"/><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_assertTrue">${impst:importStatic('org.junit.Assert.*')}&#13;
assertTrue("Mensagem Erro se for falso ! ", ${resultadoParaSerValidado});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_builderpattern">${:import(java.util.function.Consumer)}&#13;
&#13;
private static class Builder {&#13;
    // put fields builder hear&#13;
&#13;
	${word_selection}&#13;
	&#13;
    public Builder with(&#13;
        Consumer&lt;Builder&gt; builderFunction) {&#13;
        builderFunction.accept(this);&#13;
        return this;&#13;
    }&#13;
&#13;
&#13;
    public ${classNametoCreat} build() {&#13;
		// call hear contructor params&#13;
        return new ${classNametoCreat}();&#13;
    }&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_calendarFromJodaDateTimeComMaisUmDia">new DateTime().plusDays(1).toGregorianCalendar()</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_calendarFromJodaDateTimeComMenosUmDia">new DateTime().minusDays(1).toGregorianCalendar();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_CalendarRemoveHoraMinutoSegundo">CalendarUtil.obtemDataSemHH_MM_SS(Calendar.getInstance());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_carregaArquiteturaObjetoDominioNoCTX">  protected ${DominioSeraCarregado}DAO ${DominioSeraCarregado}DAO;&#13;
  protected ${DominioSeraCarregado}BD  ${DominioSeraCarregado}BD;&#13;
  protected ${DominioSeraCarregado}RN  ${DominioSeraCarregado}RN;&#13;
&#13;
  public ${DominioSeraCarregado}RN carregar${DominioSeraCarregado}RN() {&#13;
    ${DominioSeraCarregado}DAO = new ${DominioSeraCarregado}DAO();&#13;
    ${DominioSeraCarregado}DAO.setEntityManager(entityManager);&#13;
&#13;
    ${DominioSeraCarregado}BD = new ${DominioSeraCarregado}BD();&#13;
    ${DominioSeraCarregado}BD.setEntityManager(entityManager);&#13;
    ${DominioSeraCarregado}BD.setSessionMB(sessionMB);&#13;
&#13;
    ${DominioSeraCarregado}RN = new ${DominioSeraCarregado}RN();&#13;
    ${DominioSeraCarregado}RN.setBD(${DominioSeraCarregado}BD);&#13;
&#13;
    return ${DominioSeraCarregado}RN;&#13;
  }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_carregaParamsPesqSessaoPesqAuto">      AppED ped = sessionFilter.get(this.getClass());&#13;
      if (ped != null) {&#13;
        setPed(ped);&#13;
      }&#13;
      &#13;
      if(this.realizarConsulta == null || this.realizarConsulta == false) {&#13;
        defineValoresDefaultDosCampos();&#13;
        this.realizarConsulta = false;&#13;
      }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ClassBD">${imp:import( javax.annotation.PostConstruct, javax.persistence.EntityManager, javax.persistence.PersistenceContext, org.hibernate.criterion.DetachedCriteria, org.hibernate.criterion.MatchMode, org.hibernate.criterion.Restrictions, com.procergs.gfi.infra.AppBD)}&#13;
&#13;
public class ${word_selection} extends AppBD&lt;${objetoED}, ${type:link(&#13;
	Long,&#13;
	Integer,&#13;
	Double,&#13;
	Float,&#13;
	String,&#13;
	BigDecimal)}&gt; {&#13;
&#13;
  @PersistenceContext(unitName = "GFI")&#13;
  EntityManager entityManager;&#13;
&#13;
  @PostConstruct&#13;
  public void init() {&#13;
    super.setEntityManager(entityManager);&#13;
    super.init();&#13;
  }&#13;
  &#13;
  @Override&#13;
  public DetachedCriteria montaCriterios(${objetoED} ed) {&#13;
    DetachedCriteria dc = DetachedCriteria.forClass(${objetoED}.class);&#13;
    &#13;
	if ((ed.getId()) != null) {&#13;
      dc.add(Restrictions.eq("id", ed.getId()));&#13;
    }&#13;
    ${parent:var(org.eclipse.swt.widgets.Composite)}&#13;
    return dc;&#13;
  }&#13;
}&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ClassCTX">${imp:import( com.procergs.gfi.dividaativa.teste.BaseIT )}&#13;
&#13;
&#13;
public class ${typeComunName}CTX extends BaseIT {&#13;
&#13;
  protected ${typeComunName}DAO      ${varcomunName}DAO;&#13;
  protected ${typeComunName}BD       ${varcomunName}BD;&#13;
  protected ${typeComunName}RN       ${varcomunName}RN;&#13;
  &#13;
  &#13;
  protected final void prepararCenarios() {&#13;
    super.startConnection();&#13;
    this.carregarSessionMB();&#13;
    super.carregarMessageProvider();&#13;
    this.carregarRN();&#13;
  }&#13;
  &#13;
  public ${typeComunName}RN carregarRN() {&#13;
    ${varcomunName}DAO = new ${typeComunName}DAO();&#13;
    ${varcomunName}DAO.setEntityManager(entityManager);&#13;
&#13;
    ${varcomunName}BD = new ${typeComunName}BD();&#13;
    ${varcomunName}BD.setEntityManager(entityManager);&#13;
    ${varcomunName}BD.setSessionMB(sessionMB);&#13;
&#13;
    ${varcomunName}RN = new ${typeComunName}RN();&#13;
    ${varcomunName}RN.set${typeComunName}BD(${varcomunName}BD);&#13;
&#13;
    return ${varcomunName}RN;&#13;
  }&#13;
  &#13;
  public ${typeComunName}ED incluir(String template) {&#13;
    ${typeComunName}ED ${typeComunName}ED = ${typeComunName}FTR.criar(template);&#13;
    return (${typeComunName}ED) ${typeComunName}DAO.inclui(${typeComunName}ED);&#13;
  }&#13;
&#13;
  public void incluirTodos() {&#13;
    this.incluir(${typeComunName}FTR.TEMPLATE_XXXXXXXX);&#13;
    this.incluir(${typeComunName}FTR.TEMPLATE_YYYYYYYY);&#13;
    this.incluir(${typeComunName}FTR.TEMPLATE_ZZZZZZZZ);&#13;
  }&#13;
}&#13;
${cursor}&#13;
&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ClassDAO">${imp:import( com.procergs.gfi.dividaativa.teste.AppDAO )}&#13;
&#13;
&#13;
public class ${DomainName}DAO extends AppDAO&lt;${DomainName}ED, Long&gt; {&#13;
&#13;
  public ${DomainName}DAO() {}&#13;
&#13;
  public ${DomainName}DAO(final EntityManager entityManager) {&#13;
    super.setEntityManager(entityManager);&#13;
  }&#13;
&#13;
  public ${DomainName}ED incluir(String template) {&#13;
    ${DomainName}ED ed = ${DomainName}FTR.criar(template);&#13;
    return (${DomainName}ED) super.inclui(ed);&#13;
  }&#13;
&#13;
  public void incluirTodos() {&#13;
    this.incluir(${DomainName}FTR._);&#13;
    this.incluir(${DomainName}FTR._);&#13;
    this.incluir(${DomainName}FTR._);&#13;
  }&#13;
&#13;
${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classefixtureFTR">${imp:import(&#13;
br.com.six2six.fixturefactory.Fixture,&#13;
br.com.six2six.fixturefactory.Rule,&#13;
com.procergs.gfi.dividaativa.teste.EntityFactory,&#13;
com.procergs.gfi.modulo.dividaativa.ed.EtapaED&#13;
)}&#13;
&#13;
public class ${DOMINIO}FTR extends EntityFactory {&#13;
  public static final String NOMES_TEMPLATES = "NOMES_TEMPLATES";&#13;
&#13;
  public static ${DOMINIO}ED criar(String template) {&#13;
    ${DOMINIO}FTR.createTeamFixture();&#13;
    return Fixture.from(${DOMINIO}ED.class).gimme(template);&#13;
  }&#13;
&#13;
  private static void createTeamFixture() {&#13;
&#13;
    // Colar as FIXTURES geradas pelo gerador Fixture.&#13;
&#13;
  }&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classeSTP">${impst:importStatic('org.junit.Assert.*')}&#13;
&#13;
${imp:import(&#13;
cucumber.api.java.After,&#13;
cucumber.api.java.Before,&#13;
cucumber.api.java.pt.Dado,&#13;
cucumber.api.java.pt.Entao,&#13;
cucumber.api.java.pt.Quando&#13;
)}&#13;
&#13;
public class ${DOMINIO}STP extends ${DOMINIO}CTX {&#13;
&#13;
  /*&#13;
   * --------------------------------- Configuração&#13;
   */&#13;
&#13;
  @Before&#13;
  public void initializeScenario() {&#13;
    super.prepararCenarios();&#13;
  }&#13;
&#13;
  @After&#13;
  public void finalizeScenario() {&#13;
    super.closeConnection();&#13;
  }&#13;
&#13;
  /*&#13;
   * --------------------------------- Funcionalidades geradas pelo arquivo xyz.fixture&#13;
   */&#13;
&#13;
  @Dado("^bla bla bla$$")&#13;
  public void quePretendoIncluirUmaExcecaoDePessoaFisica() throws Throwable {&#13;
    //dominioFTR.criar(ExcecaoFTR.PESSOA_FISICA);&#13;
    //dominioDAO.executar();&#13;
&#13;
&#13;
    // DominioFTR.criar(ExcecaoFTR.PESSOA_FISICA);&#13;
	// DAO.salva&#13;
	// DAO.pesq();&#13;
	// RN.executaXYZ();&#13;
    // DominioFTR.criar(ExcecaoFTR.PESSOA_FISICA);&#13;
	// DAO.salva&#13;
	// DAO.pesq();&#13;
	// RN.executaXYZ();&#13;
&#13;
  }&#13;
&#13;
  @Quando("^tento incluir a excecao$$")&#13;
  public void tentoIncluirAExcecao() throws Throwable {&#13;
    //Executa RN&#13;
	//try {&#13;
    //  excecaoEDGravada = excecaoRN.inclui(excecaoEDInformada);&#13;
    //} catch (Exception e) {&#13;
    //  mensagemErroObtida = e.getMessage() != null ? e.getMessage() : e.toString();&#13;
    //}&#13;
  }&#13;
&#13;
  @Entao("^nao deve ser exibida nenhuma mensagem de erro para a excecao$$")&#13;
  public void naoDeveSerExibidaNenhumaMensagemDeErroParaAExcecao() throws Throwable {&#13;
    //Valida retornos&#13;
	//Valida exceções&#13;
	//Assert.assertNull("nao deve ser exibida nenhuma mensagem de erro para a excecao", mensagemErroObtida);&#13;
  }&#13;
}&#13;
&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classeTestCucumber">${imp:import(&#13;
cucumber.api.CucumberOptions,&#13;
cucumber.api.SnippetType&#13;
)}&#13;
&#13;
@CucumberOptions(features = "src/test/resources/cucumber/$${caminho/do/ArquioCucumber}.feature", &#13;
                 monochrome = true, &#13;
                 plugin = { "pretty", "html:target/html", "json:cucumber.json" }, &#13;
                 snippets = SnippetType.CAMELCASE,&#13;
                 tags = "~@ignore")&#13;
public class ${DOMINIO}Test {&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classNameToRest">${:import(&#13;
org.slf4j.Logger,&#13;
com.procergs.gfi.infra.batch.LogonBatch,&#13;
com.procergs.arqjava4.rest.RestException,&#13;
com.procergs.arqjava4.security.SessionMB,&#13;
javax.ws.rs.Path,&#13;
javax.ws.rs.Produces,&#13;
javax.ws.rs.core.MediaType)}&#13;
.&#13;
@Path("/${path}")&#13;
@Produces(MediaType.APPLICATION_JSON)&#13;
public class ${word_selection} {&#13;
	&#13;
	@Inject&#13;
	private Logger logger;&#13;
	&#13;
	@Inject&#13;
	private SessionMB sessionMB;&#13;
	&#13;
	@Inject&#13;
	private LogonBatch logonBatch;&#13;
&#13;
	//this.verificarUsuarioPossuiPermissao("DAPESSOAPROCESSO", "VERIFICARPROCDA");&#13;
	private void verificarUsuarioPossuiPermissao(final String objeto, final String acao) throws ForbiddenRestException {&#13;
		logger.debug("verificando se o usuário possui a permissão [OBJETO=" + objeto + ", AÇÃO=" + acao + "].");&#13;
		&#13;
		if (!sessionMB.hasPermission("GFI", objeto, acao)) {&#13;
			throw new ForbiddenRestException();&#13;
		}&#13;
	}&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classRN">${imp:import( java.util.List, javax.annotation.PostConstruct, javax.ejb.Stateless, javax.ejb.TransactionAttribute, javax.ejb.TransactionAttributeType, javax.inject.Inject, com.procergs.arqjava4.security.Permissao, com.procergs.gfi.infra.AppInterceptor, com.procergs.gfi.infra.AppRN, com.procergs.gfi.modulo.dividaativa.ed.EtapaED)}&#13;
&#13;
@AppInterceptor&#13;
@Permissao(desabilitada = true)&#13;
@Stateless&#13;
@TransactionAttribute(TransactionAttributeType.SUPPORTS)&#13;
public class ${word_selection} extends AppRN&lt;${objetoED}, ${type:link(&#13;
	Long,&#13;
	Integer,&#13;
	Double,&#13;
	Float,&#13;
	String,&#13;
	BigDecimal)}&gt; {&#13;
&#13;
	private static final long serialVersionUID = 1L;&#13;
&#13;
	@Inject&#13;
	private ${objetoBD} ${objetoBD};&#13;
&#13;
	@PostConstruct&#13;
	public void initBD() {&#13;
		setBD(${objetoBD});&#13;
	}&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_classToPowerMock">${imp:import(org.powermock.modules.junit4.PowerMockRunner)}&#13;
@RunWith(PowerMockRunner.class)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_configurarTipoTransacaoEjbRN">@TransactionAttribute(TransactionAttributeType.REQUIRED)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ConverteDataComSimpleDateFormat">new SimpleDateFormat("yyyyMMdd").format(new Date()${cursor})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_converterStringParaCalendar">CalendarUtil.converterStringParaCalendar("${11_01_2016}")/**11/01/2016**/</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_converterStringYYYYMMDDParaCalendar">CalendarUtil.converterStringYYYYMMDDParaCalendar("${StrDataParaConverter_20170505}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_countLambda">${iterable_element}.stream().filter(resumo -&gt; resumo != null &amp;&amp; resumo.isXxxxYyyyyZzzzz()).count();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_criteriaGetUniqueResult">criteria.getExecutableCriteria(getSession()).uniqueResult()</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_DataTableForaFramework">    // private Paginator&lt;GuiaED&gt;                  listaPaginadaDataTable;&#13;
    &#13;
    // &lt;p:dataTable id="dtGuiasDoProcesso" var="g" rowKey="#{g.id}"&#13;
    //  value="#{xxxxxxxFormMB.listaPaginadaDataTable.datamodel}"&#13;
    //  ...&#13;
    &#13;
    ${listaPaginadaDataTable} = new Paginator&lt;${XxxxED}&gt;();&#13;
    ${listaPaginadaDataTable}.setPaginatorRN(new PaginatorRN&lt;${XxxxED}&gt;(guiaPesq) {&#13;
&#13;
      /**&#13;
       * &#13;
       */&#13;
      private static final long serialVersionUID = 128377124721584434L;&#13;
&#13;
      @Override&#13;
      public List&lt;${XxxxED}&gt; lista() {&#13;
        return ${xxxRN}.listaXxxx(getPesqED());&#13;
      }&#13;
&#13;
      @Override&#13;
      public int conta() {&#13;
        return ${xxxRN}.listaXxxx(getPesqED()).size();&#13;
      }&#13;
    });</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_EhEventoAjaxPostBack">if (!FacesContext.getCurrentInstance().isPostback()) {&#13;
    ${word_selection}${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_else">else {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_elseif">else if (${word_selection}) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_emailHtml">//Inicializa String conterá conteúdo do email com html&#13;
    StringBuilder conteudoEmail = new StringBuilder();&#13;
       &#13;
    // Inicio documento Html&#13;
    conteudoEmail.append("&lt;!DOCTYPE html&gt;");&#13;
    conteudoEmail.append("&lt;html&gt;");&#13;
    conteudoEmail.append("  &lt;head&gt;");&#13;
    conteudoEmail.append("    &lt;meta lang=\"pt-BR\" charset=\"ISO-8859-1\"&gt;");&#13;
    conteudoEmail.append("    &lt;title&gt;GFI - Relatório de geração de processos&lt;/title&gt;");&#13;
    conteudoEmail.append("  &lt;/head&gt;");&#13;
    conteudoEmail.append("  &lt;body&gt;");&#13;
    &#13;
    final Date dataAtual = new Date();&#13;
    &#13;
    final SimpleDateFormat formatadorData = new SimpleDateFormat("dd/MM/yyyy");&#13;
    final SimpleDateFormat formatadorHora = new SimpleDateFormat("HH:mm:ss");&#13;
    &#13;
    final String dataFormatada = formatadorData.format(dataAtual);&#13;
    final String horaFormatada = formatadorHora.format(dataAtual);&#13;
    &#13;
    final String nomeUsuario = sessionMB.getUser().getNome();&#13;
    final String matriculaUsuario = sessionMB.getUser().getProperties().get("matricula").toString();&#13;
    &#13;
    // Cabeçalho&#13;
    conteudoEmail.append("&lt;p style=\"text-indent: 50px;\"&gt;Resumo da geração de processos efetuada por ")&#13;
    .append(nomeUsuario)&#13;
    .append(" (matrícula: ")&#13;
    .append(matriculaUsuario)&#13;
    .append(") finalizada em ")&#13;
    .append(dataFormatada)&#13;
    .append(" às ")&#13;
    .append(horaFormatada)&#13;
    .append("&lt;/p&gt;");&#13;
&#13;
    //Título / mensagem&#13;
    conteudoEmail.append("&lt;label style=\"font-weight: bold;margin-left: 50px;\"&gt;");&#13;
    &#13;
    if (processosGeradosSucessoListSB.size() == 1) {&#13;
      conteudoEmail.append("1 processo gerado com sucesso:");&#13;
    } else if (processosGeradosSucessoListSB.size() &gt; 1) {&#13;
      conteudoEmail.append(processosGeradosSucessoListSB.size()).append(" processos gerados com sucesso:");&#13;
    }&#13;
    &#13;
    conteudoEmail.append("&lt;/label&gt;&lt;br&gt;");&#13;
    &#13;
    // Inicio tabela com titulo das colunas&#13;
    conteudoEmail.append("&lt;p/&gt;");&#13;
    conteudoEmail.append("&lt;table&gt;");&#13;
    conteudoEmail.append("  &lt;tr&gt;");&#13;
    conteudoEmail.append("    &lt;th style=\"padding: 0px 5px 0px 5px;\"&gt;Titulo 1&lt;/th&gt;");&#13;
    conteudoEmail.append("    &lt;th style=\"padding: 0px 5px 0px 5px;\"&gt;Titulo 2&lt;/th&gt;");&#13;
    conteudoEmail.append("    &lt;th style=\"padding: 0px 5px 0px 5px;\"&gt;Titulo 3&lt;/th&gt;");&#13;
    conteudoEmail.append("    &lt;th style=\"padding: 0px 5px 0px 5px;\"&gt;Titulo 4&lt;/th&gt;");&#13;
    conteudoEmail.append("    &lt;th style=\"padding: 0px 5px 0px 5px;\"&gt;Titulo 5&lt;/th&gt;");&#13;
    conteudoEmail.append("  &lt;/tr&gt;");&#13;
    &#13;
    // Adicionando linha tabela&#13;
    &#13;
    List&lt;StringBuilder&gt; linhas = new ArrayList&lt;StringBuilder&gt;();&#13;
    &#13;
    NumberFormat df = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));&#13;
    final AtomicInteger atomicIntegerProcessosNaoGerados = new AtomicInteger(0);&#13;
    &#13;
    if ( ${iterable_element} != null &amp;&amp; !${iterable_element}.isEmpty() ) { &#13;
      ${iterable_element}&#13;
        .stream()&#13;
        .filter( item -&gt;item.isXxxxxYyyyyZzzzz() == false )&#13;
        .forEach(resumo -&gt; &#13;
          {&#13;
            atomicIntegerProcessosNaoGerados.addAndGet(1);&#13;
            &#13;
            StringBuilder linhaSB = new StringBuilder();&#13;
            &#13;
            linhaSB.append("&lt;tr&gt;");&#13;
            linhaSB.append("  &lt;td style=\"padding: 0px 5px 0px 5px;\"&gt;").append(atomicIntegerProcessosNaoGerados.get()).append("&lt;/td&gt;");&#13;
            linhaSB.append("  &lt;td style=\"padding: 0px 5px 0px 5px;\"&gt;").append(resumo.getXxxxxxx()).append("&lt;/td&gt;");&#13;
            linhaSB.append("  &lt;td style=\"padding: 0px 5px 0px 5px;\"&gt;").append(resumo.getYyyyyyyyy()).append("&lt;/td&gt;");&#13;
            linhaSB.append("  &lt;td style=\"padding: 0px 5px 0px 5px;\"&gt;").append(resumo.getZzzzzzzz()).append("&lt;/td&gt;");&#13;
            linhaSB.append("  &lt;td style=\"padding: 0px 5px 0px 5px;\"&gt;").append(resumo.getDddddddd()).append("&lt;/td&gt;");&#13;
            linhaSB.append("&lt;/tr&gt;");&#13;
            &#13;
            linhas.add(linhaSB);&#13;
          }&#13;
        );&#13;
    &#13;
    //adiciona itens da tabela gerados    &#13;
    for (StringBuilder linha : processosGeradosSucessoListSB) {&#13;
      conteudoEmail.append(linha.toString());&#13;
    }    &#13;
    &#13;
    // Fim tabela&#13;
    conteudoEmail.append("&lt;/table&gt;");&#13;
    conteudoEmail.append("&lt;p/&gt;&lt;br&gt;");&#13;
    &#13;
    // Fim documento Html&#13;
    conteudoEmail.append("&lt;br&gt;&lt;br&gt;&lt;br&gt;");&#13;
    conteudoEmail.append("    %s");&#13;
    conteudoEmail.append("  &lt;/body&gt;");&#13;
    conteudoEmail.append("&lt;/html&gt;");</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ErrorMessageJsf">FacesUtil.addErrorMessage(messageProvider.getMessage("${cursor}"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_estruturaCucumber">//Estrutura cucumber&#13;
--&gt;&gt; FTR	//Carrega RNs BDs DAOs &#13;
--&gt;&gt; DAO	//Executa SQLs, Lida banco, Inclui Fixtures&#13;
--&gt;&gt; CTX	//Gera objetos apartir das fixtures&#13;
--&gt;&gt; STP	//Implementa regras do arquivo feature&#13;
--&gt;&gt; Test	//Classe Test que aponta para o arquivo .feature&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Generate Exception com Cause" enabled="true" name="j_excCauseClass">import com.procergs.gfi.infra.exception.RNExceptionComCause;&#13;
&#13;
public class ${word_selection} extends RNExceptionComCause {&#13;
&#13;
  public ${word_selection}(String mensagem) {&#13;
    super(mensagem);&#13;
  }&#13;
  &#13;
  public ${word_selection}() {&#13;
    super();&#13;
  }&#13;
&#13;
  private static final long serialVersionUID = 1L;&#13;
  &#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_exemploMockClasseStatica">	Calendar calendarDataCriacao = Calendar.getInstance();&#13;
    PowerMockito.mockStatic(Calendar.class);&#13;
    PowerMockito.when(Calendar.getInstance()).thenReturn(calendarDataCriacao);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ExibirDialogJSFdoMB">RequestContext context = RequestContext.getCurrentInstance();&#13;
context.execute("PF('${dialogName}').show();");</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_FormataCpfCnpj">CpfCnpjUtil.aplicaMascara(${NumeroCpfCnpj}, ${TipoPessoaEnum})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_FormataDataDDMMYYYY">CalendarUtil.obterDataFormatadaDDMMAAAA(${CalendarVar})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_FormataDinheiroBigDecimal">BigDecimalUtil.formataMascaraDinheiroComSimboloReais(${BigDecimalVal})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_geraEmail">	  @Inject&#13;
    private Event&lt;EMail&gt; eventoDispararEMail;&#13;
    &#13;
	  try {&#13;
      &#13;
      String para     = PropriedadesSistemaUtil.buscaPropriedade(Propriedade.);&#13;
      String assunto  = "";&#13;
      String conteudo = ${geraConteudoEmail}.toString();&#13;
      &#13;
      EMail eMail = new EMail(para, assunto, conteudo, MimeType.TEXT_HTML);&#13;
      eventoDispararEMail.fire(eMail);&#13;
      &#13;
    } catch (Exception e) {&#13;
      logger.error("Problemas ao tentar enviar e-mail ${xxxxxxx} ", e);&#13;
    }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_getResourceMessage">messageProvider.getMessage("${cursor}");</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_if">if(${word_selection}){&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_IfNotEmpty">if (${name:var} != null &amp;&amp; !${name:var}.isEmpty() ) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_imprimirRelatorioPdfDoDataTable">public void imprimirRelatorioPdfDoDataTable() throws DocumentException, IOException {&#13;
	    PdfPrintList printList = new PdfPrintList(messageProvider.getMessage("${header}"), messageProvider.getMessage("${header}"), sessionMB);&#13;
	    printList.setTxtTexto(getCriterios());&#13;
	    &#13;
	    printList.criaColunas("","","","","","","","","","");&#13;
	    printList.limparLinhas();&#13;
&#13;
	    List&lt;InfracaoVencidaSinteticoED&gt; preProcessos = getRN().lista(getPed());&#13;
&#13;
	    for (InfracaoVencidaSinteticoED preProcesso : preProcessos) {&#13;
	    	printList.criarLinhaRelatorio( , , , , , , , , ,);&#13;
	    }&#13;
	    &#13;
	    printList.imprimir();&#13;
	  }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_injectDependency">${:import(javax.inject.Inject)} &#13;
@Inject&#13;
	private ${ClasseParaInjetar} ${ClasseParaInjetar};</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_JodaTimeFormatDataToString">dataJodaTime.format(DateTimeFormatter.ofPattern("yyyyMM"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_JodaTimeGetCalendarFromLocalDate">GregorianCalendar.from(dataLancamento.atStartOfDay(ZoneId.systemDefault()))</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_JodaTimeLocalDateNow">LocalDate dataCompetencia = LocalDate.now();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpa_column">@Column(name = "${word_selection}${cursor}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpa_notnull">@NotNull</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaCreaeExecuteNamedQuery">TypedQuery&lt;Integer&gt; query = entityManager.createNamedQuery("ArquivoRetornoCorreioED.obterUltimoNsa", Integer.class);&#13;
		Integer ultimoNsa = query.getSingleResult();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaCreateAlias">criteria.createAlias("${atributoObjetoPai}", "${NomeAlias}", JoinType.LEFT_OUTER_JOIN);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaCreateCriteriaByExample">criteria.add(Example.create(ped).enableLike(MatchMode.ANYWHERE).ignoreCase());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaCriteriaAddOrder">criteria.addOrder(Order.asc("${cursor}"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaCriteriaGetList">criteria.getExecutableCriteria(getSession()).list()</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaNovaRestricaoCriteriaWhere">${imp:import(org.hibernate.criterion.Restrictions)}&#13;
    criteria.add(Restrictions.);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaQueryJpqlComParametro">Query query = super.entityManager.createQuery("SELECT i FROM ${DOMINIO}ED i WHERE i.nroIntDa${DOMINIO} = :id");&#13;
query.setParameter("id", id);&#13;
(${DOMINIO}ED) edRetornoSql = (${DOMINIO}ED) query.getSingleResult();&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaSetProjectionSimple">Criteria criteria = detachedCriteria.getExecutableCriteria(super.getSession());&#13;
		criteria.setProjection(Projections.max("numeroSequencialArquivo"));&#13;
&#13;
		Long ultimoNSA = (Long) criteria.uniqueResult();&#13;
&#13;
		if (ultimoNSA == null) {&#13;
			ultimoNSA = 0L;&#13;
		}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_jpaVarDetachedCriteriaFromClass">${imp:import( org.hibernate.criterion.DetachedCriteria)}&#13;
DetachedCriteria criteria = DetachedCriteria.forClass(${Dominio}ED.class);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_JSFerrorMessage">FacesUtil.addErrorMessage(messageProvider.getMessage("${cursor}"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_JSFinfoMessage">FacesUtil.addInfoMessage("${MensagemInformacao}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_junitExpectException">	@Rule&#13;
	public ExpectedException thrown = ExpectedException.none();&#13;
	@Test&#13;
	public void deveLancarExcecaoParaCodClienteInvalido() {&#13;
		final String codClienteInvalido = "1234";&#13;
		final String header = this.montarLinhaHeaderSubstituindoCampo(POSICAO_CAMPO_COD_CLIENTE, codClienteInvalido);&#13;
		&#13;
		final String erro = this.montarMensagemErro(DESCRICAO_COD_CLIENTE, COD_CLIENTE_VALIDO, codClienteInvalido);&#13;
		this.thrown.expect(ValidacaoLinhaHeaderArquivoRetornoCorreioException.class);&#13;
		this.thrown.expectMessage(erro.toString());&#13;
		&#13;
		this.validarHeader(header);&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_leftPad">StringUtils.leftPad(${word_selection}, ${tamanho}, "${caracterSubstituir}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_LimpaDataTable">DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("form:lista");&#13;
if (dataTable != null) {&#13;
    dataTable.setSortOrder("ascending");  // reset sortOrder&#13;
    dataTable.setFirst(0);                // reset page&#13;
    dataTable.setFilteredValue(null);     // reset filter&#13;
    dataTable.setFilters(null);&#13;
    dataTable.reset();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_messageProvider">messageProvider.getMessage("")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_metodoRest">${:import(&#13;
javax.inject.Inject,&#13;
javax.ws.rs.GET,&#13;
javax.ws.rs.HeaderParam,&#13;
javax.ws.rs.Path,&#13;
javax.ws.rs.PathParam,&#13;
javax.ws.rs.Produces,&#13;
javax.ws.rs.core.MediaType,&#13;
javax.ws.rs.core.Response,&#13;
com.procergs.gfi.infra.util.rest.BadRequestRestException,&#13;
com.procergs.gfi.infra.util.rest.ForbiddenRestException,&#13;
com.procergs.arqjava4.rest.RestException&#13;
)} &#13;
/**&#13;
	 * Descricao rest&#13;
	 * &#13;
	 * @param organizacao&#13;
	 *            Organização do usuário.&#13;
	 * &#13;
	 * @param matricula&#13;
	 *            Matrícula do usuário.&#13;
	 * &#13;
	 * @param senha&#13;
	 *            Senha do usuário.&#13;
	 * &#13;
	 * @param ParametrosRest&#13;
	 *            DescricaoParametroRest&#13;
	 * &#13;
	 * @param ... Mais ParametrosRest&#13;
	 *            ... DescricaoParametroRest&#13;
	 * &#13;
	 * @param paramPath1&#13;
	 *            ... Parametro um&#13;
	 * &#13;
	 * @param paramPath2&#13;
	 *            ... Parametro dois&#13;
	 * &#13;
	 * &#13;
	 * @return Descricao objeto retorno rest&#13;
	 *         &lt;br&gt;&#13;
	 *         Mais detalhes objeto retorno.&#13;
	 *         &#13;
	 */&#13;
	@GET// @POST&#13;
	@Path("{${paramPath1}}/{${paramPath2}}/${ContinuacaoCaminhoRest}")&#13;
	@Produces("application/json; charset=UTF-8")&#13;
	public Response ${nomeAcaoSerExecutada} ${word_selection}(@HeaderParam("organizacao") String organizacao,&#13;
													  @HeaderParam("matricula") String matricula, &#13;
													  @HeaderParam("senha") String senha//,&#13;
													  //@PathParam("paramPath1") Integer paramPath1, &#13;
													  //@PathParam("paramPath2") Long paramPath2&#13;
													  // ObjectBodyParam object&#13;
	) {&#13;
		logger.debug("Iniciando serviço...");&#13;
		${objetoRespostaDTO} resposta = null;&#13;
		&#13;
		try {&#13;
			logger.debug("verificando permissão...");&#13;
			//this.verificarUsuarioPossuiPermissao("DAPESSOAPROCESSO", "VERIFICARPROCDA");&#13;
			logger.debug("permissão ok!");&#13;
			&#13;
			logger.debug("validando preenchimento de campo obrigatorios...");&#13;
			//this.verificarPreenchimentoCampoObrigatorio(codigoTipoPessoa, "codigoTipoPessoa");&#13;
			logger.debug("campos obrigatórios ok!");&#13;
			&#13;
			logger.debug("validando que dados de entrada estejam corretos...");&#13;
			//this.validarDadosEstejamCorretos(codigoTipoPessoa, cpfOuCnpj);&#13;
			logger.debug("dados de entrada ok!");&#13;
			&#13;
			logger.debug("enviando requição ao servidor...");&#13;
			&#13;
			//PessoaProcessoED pesqED = this.criarPesqED(paramPath1, paramPath2);&#13;
			//------&#13;
			//resposta = new ${objetoRespostaDTO}();&#13;
			//resposta.setValor(RN.executaAcao(pesqED));&#13;
			//------&#13;
			//resposta = RN.executaAcao(pesqED);&#13;
			&#13;
			logger.debug("resposta recebida!");&#13;
		} catch (BadRequestRestException excecao) {&#13;
	    	logger.error(excecao.getMensagem(), excecao);&#13;
	    	return Response.status(Response.Status.BAD_REQUEST).entity(new RestException(Response.Status.BAD_REQUEST, excecao.getMensagem())).build();&#13;
	  	} catch (ForbiddenRestException excecao) {&#13;
	    	logger.error(excecao.getMensagem(), excecao);&#13;
	    	return Response.status(Response.Status.FORBIDDEN).entity(new RestException(Response.Status.FORBIDDEN, excecao.getMensagem())).build();&#13;
	  	} &#13;
&#13;
		logger.debug("200 - Ok!");&#13;
		logger.debug("Finalizado serviço!");&#13;
		return Response.status(Response.Status.OK).entity(resposta).build();&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_moldeImportClassesToTemplate">$${impst:importStatic(&#13;
//put down classes static to import, separated bu "," and between 'simple quotes'&#13;
// Exmp: 'junit.framework.Assert.*'&#13;
${ClassesStaticas}&#13;
)}&#13;
&#13;
$${imp:import(&#13;
//put down classes not static to import, separated bu ","&#13;
${ClassesNaoStaticas}&#13;
)}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_MontaCriteriosCnpj">montaCriterios.montaCriterio(messageProvider.getMessage("label.cnpj"), CpfCnpjUtil.aplicaMascara(${NumeroCpfCnpj}, TipoPessoaEnum.PESSOA_JURIDICA), stringCriterios);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_montaCriteriosCpf">montaCriterios.montaCriterio(messageProvider.getMessage("label.cpf"), CpfCnpjUtil.aplicaMascara(${NumeroCpfCnpj}, TipoPessoaEnum.PESSOA_FISICA), stringCriterios);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_montaCriteriosDefault">montaCriterios.montaCriterio(messageProvider.getMessage(""), getPed().get(), stringCriterios);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_montaCriteriosPeriodo">String intervaloPeriodo = new PeriodoData(${DataInicial}, ${DataFinal}).montarDescricaoPeriodo();&#13;
montaCriterios.montaCriterio(messageProvider.getMessage("${labelPeriodo}"), intervaloPeriodo , stringCriterios);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_newFile">${:import(java.io.PrintWriter, java.io.BufferedWriter, java.io.FileWriter)} try { PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(${logFile:var(String)}, true))); out.println(${logLine:var(String)}${cursor}); out.close(); } catch (IOException e) { /* TODO: exception handling */ e.printStackTrace(); }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_newObject">new ${word_selection}();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_numberFormatPtBr">NumberFormat numFormatBr = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_numberFormatPtBrApply">${numFormatBr}.format(${word_selection})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_permissaoSoe">@Permissao(desabilitada = true)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_preparaClassesStaticasParaMockito">// localizado entre a declaracao do pacote e a declaracao do nome da classe&#13;
@PrepareForTest({ &#13;
// listaClasses staticas para sereme mocadas pelo mockito. Ex: Calendar.class, UtilData.class &#13;
})</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_propriedadeSistema">String ${propriedadeSistema};  &#13;
    &#13;
try {&#13;
  ${propriedadeSistema} =  PropriedadesSistemaUtil.buscaPropriedade(Propriedade.${PropriedadeEstatica});&#13;
} catch (PropriedadeSistemaNaoEncontradaException excecao) {&#13;
  ${propriedadeSistema} = "&lt;Propriedade \"${descricaoPropriedadeSistema}\" não encontrada.&gt;";&#13;
  logger.warn(excecao.getMessage());&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_propriedadeSistemaSimplificada">PropriedadesSistemaUtil.buscaPropriedade(Propriedade.)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_removehora"/><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_rightPad">StringUtils.rightPad(${word_selection}, ${tamanho}, "${caracterSubstituir}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_SetScalaArredondamentoBigDecimal">.setScale(2, BigDecimal.ROUND_FLOOR)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_switch">//int i = -1;&#13;
//switch (i) {&#13;
switch (${localVar}) {&#13;
  case 0: System.out.println ("despicable"); break;&#13;
  case 1: System.out.println ("halo");       break;&#13;
  case 2: System.out.println ("fungus");     break;&#13;
  case 3: System.out.println ("fugitive");   break;&#13;
  case 4: System.out.println ("abstruse");   break;&#13;
  default: break;&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testDoReturnComMockitoComSpy">$${imp:import(&#13;
org.mockito.Mockito,&#13;
org.mockito.MockitoAnnotations,&#13;
org.mockito.Spy&#13;
)}&#13;
&#13;
  @Spy&#13;
  private ${CLASSEOBJETOMOCADO} ${OBJETOMOCADO}; &#13;
  // tem que chamar o initMocks no before para inicializar objetocom spy&#13;
  &#13;
  Mockito.doReturn(true).when(${OBJETOMOCADO}).${metodoQueSeraMocado}();&#13;
  &#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testeMockitoVerify">Mockito.verify(notificacaoCobrancaRN).altera(notificacaoSemId)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMethod">${imp:import(org.junit.Test)}&#13;
${impst:importStatic('org.hamcrest.MatcherAssert.*')}&#13;
&#13;
@Test&#13;
public void ${testName}() throws Exception {    &#13;
    ${cursor} &#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoImplemetaThenAnswer">Mockito.when(taxaSelicRest.consulta((Integer) Mockito.anyObject(), (Integer) Mockito.anyObject())).thenAnswer(new Answer&lt;TaxaSelicDTO&gt;() {&#13;
      @Override&#13;
      public TaxaSelicDTO answer(InvocationOnMock invocation) throws Throwable {        &#13;
        &#13;
        Integer mes = (Integer) invocation.getArguments()[0];&#13;
        Integer ano = (Integer) invocation.getArguments()[1];&#13;
        Integer anoMes = new Integer(ano.toString() + new DecimalFormat("00").format(mes));&#13;
        &#13;
        for (TaxaSelicDTO taxaSelicDTO : listaSelic) {&#13;
          if (taxaSelicDTO.getSamTaxa().equals(anoMes)) {&#13;
            return taxaSelicDTO;&#13;
          }&#13;
        }        &#13;
        return null;&#13;
      }&#13;
    });</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoInitMocks">  @Before&#13;
  public void before() {&#13;
    MockitoAnnotations.initMocks(this); // inicializa classes que estão co anotação @spy&#13;
  }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoInjetaMockObjeto">  @Spy&#13;
  @InjectMocks&#13;
  private ${DOMINIO}RN ${DOMINIO}RN = new ${DOMINIO}RN();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoInOrder">//Garande que a INCLUISÃO DA GUIA ocorre PRIMEIRO&#13;
    InOrder inOrder = Mockito.inOrder(this.guiaRN, this.notificacaoCobrancaRN);&#13;
    inOrder.verify(this.guiaRN).inclui(notificacaoSemId.getGuia());&#13;
    inOrder.verify(this.notificacaoCobrancaRN).inclui(notificacaoSemId);</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoMocaObjeto">  @Mock&#13;
  private ${DOMINIO}RN ${DOMINIO}RN = new ${DOMINIO}RN();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoSimulaParametroDeUmClass">Mockito.any(NotificacaoCobrancaED.class)</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoThenReturn">Mockito.when(${OBJETOMOCADO}.${acao}(${parametro})).thenReturn(${objetoRetorno});//objeto mocado devera ter um spy</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testMockitoVerifyNever">Mockito.verify(notificacaoCobrancaRN, Mockito.never()).inclui(Mockito.any(NotificacaoCobrancaED.class));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_testPowerMockitoImplementaDoAnswer">try {&#13;
			PowerMockito.doAnswer(new Answer&lt;InfracaoProcessoED&gt;() {&#13;
				public InfracaoProcessoED answer(InvocationOnMock invocation) {&#13;
					InfracaoProcessoED infracaoProcessoED = (InfracaoProcessoED) invocation.getArguments()[1];&#13;
&#13;
					BigDecimal novoValorJurosInfracao = infracaoProcessoED.getValorJuros().add(valorJurosUmPorCento);&#13;
&#13;
					infracaoProcessoED.setValorJuros(novoValorJurosInfracao);&#13;
					return infracaoProcessoED;&#13;
				}&#13;
			}).when(processoRN, "atualizarInfracaoConformeSIT", (ProcessoED) Mockito.anyObject(),&#13;
					(InfracaoProcessoED) Mockito.anyObject());&#13;
		} catch (Exception e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_todo">/*** Para Fazer : &#13;
       * &#13;
       * ${todo}&#13;
       * Jeferson H Padilha&#13;
       * TODO_JHP&#13;
       * ${date} ::  ${time} &#13;
       * &#13;
       */&#13;
&#13;
${teste:var(com.procergs.gfi.infra.AbstractDadosControleSOE)}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_validaCnpj">CnpjUtil.validaCnpj(getNumeroCpfCnpj());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_validaCpf">CpfUtil.validaCpf(getNumeroCpfCnpj());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_ValidaPeriodo">PeriodoUtil.validaPeriodo(${Calendar1}, ${Calendar2}, "${descricao}")</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="j_variavelLocal">${variabletype} ${myvar:newName(variabletype)}= new ${variabletype}(${cursor});</template></templates>