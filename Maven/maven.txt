

-- compila classe
-- gerando um class
javac xxx.java 

src = source
target = alvo

-- deploy manual
javac -sourcepath ./src -d target -cp ./lib/xxx-1.47.jar ./src/Xxxxxxx.java

-- download maven
https://maven.apache.org/download.cgi

DartifactId = nome do projeto
DgroupId = camiho base do projeto
DinteractiveMode = se false, significa que o maven irá fazer tudo automticamente
DarchetypeArtifactId = modelo/template de projeto pre pronto
DskipTests = se true, pula os testes


-- configura o projeto para ser importado pelo eclipse
mvn clean compile package install eclipse:eclipse

-- maven compila projeto
-- no diretorio raiz do prjeto
-- onde esta o arquivo .pom
mvn compile

-- roda testes 
-- cria pasta surifire reports
--  que sao relatorios de execucao dos teste
mvn test

-- limpar a pasta de destino
mvn clean

-- gerar relatorio
mvn surefire-report:report

-- procurar plugins no google
maven plugin test report


-- maven gera jar/war
mvn package

-- executar um jar
java -cp Xxxxx.jar br.com.XXX.YYYYY.ddddd.ClassName

-- colocar -o no comando maven faz ele rodar off line
mvn -o compile

-- repositorio central do maven
mvnrepository.com
repo.maven.apache.org/maven2/

-- fases / ciclo vida
-- sempre que é especificado uma fase para rodar as anteriores sao obrigatorias
Clean Lifecycle
	pre-clean	execute processes needed prior to the actual project cleaning
	clean	remove all files generated by the previous build
		clean:clean
	post-clean	execute processes needed to finalize the project cleaning
Default Lifecycle
	validate	validate the project is correct and all necessary information is available.
	initialize	initialize build state, e.g. set properties or create directories.
	generate-sources	generate any source code for inclusion in compilation.
	process-sources	process the source code, for example to filter any values.
	generate-resources	generate resources for inclusion in the package.
		ear:generate-application-xml
		plugin:descriptor
	process-resources	copy and process the resources into the destination directory, ready for packaging.
		resources:resources
	compile	compile the source code of the project.
		compiler:compile
	process-classes	post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.
	generate-test-sources	generate any test source code for inclusion in compilation.
		resources:testResources
	process-test-sources	process the test source code, for example to filter any values.
	generate-test-resources	create resources for testing.
	process-test-resources	copy and process the resources into the test destination directory.
		resources:testResources
	test-compile	compile the test source code into the test destination directory
		compiler:testCompile
	process-test-classes	post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. For Maven 2.0.5 and above.
		surefire:test
	test	run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
		surefire:test
	prepare-package	perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. (Maven 2.1 and above)
	package	take the compiled code and package it in its distributable format, such as a JAR.
		ejb:ejb or ejb3:ejb3 or jar:jar or par:par or rar:rar or war:war ear:ear plugin:addPluginArtifactMetadata
		site:attach-descriptor
	pre-integration-test	perform actions required before integration tests are executed. This may involve things such as setting up the required environment.
	integration-test	process and deploy the package if necessary into an environment where integration tests can be run.
	post-integration-test	perform actions required after integration tests have been executed. This may including cleaning up the environment.
	verify	run any checks to verify the package is valid and meets quality criteria.
	install	install the package into the local repository, for use as a dependency in other projects locally.
		install:install
	deploy	done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
		deploy:deploy
Site Lifecycle
	pre-site	execute processes needed prior to the actual project site generation
	site	generate the project's site documentation
		site:site
	post-site	execute processes needed to finalize the site generation, and to prepare for site deployment
	site-deploy	deploy the generated site documentation to the specified web server
		site:deploy

-- roda relatorio pmd
mvn pmd:pmd

-- tutorial do pmd
https://maven.apache.org/plugins/maven-pmd-plugin/

-- se eu chamar o goal pmd:check que roda na fase verify
-- o maven irá rodar todas as fases ate o verify
-- mas se eu rodar somente a fase de verify o maven nao 
--    irá rodar o pmd:check
-- somente o irá rodar se o goal d plugin estiver definido no pom
-- definindo a fase do ciclo de vida do maven que o plugin sera executado e 
-- 		o goal do plugin que sera executado
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-pmd-plugin</artifactId>
	<version>3.6</version>
	<executions>
		<execution>
			<phase>verify</phase>
			<goals>
				<goal>check</goal>
			</goals>
		</execution>
	</executions>
</plugin>
-- a funcionalidade de "check" do plugin pmd será será executado na fase 
-- de check do maven



